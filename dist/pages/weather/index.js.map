{"version":3,"sources":["pages/weather/index.js"],"names":["isUpdate","EFFECT_CANVAS_HEIGHT","CHART_CANVAS_HEIGHT","Page","data","statusBarHeight","backgroundImage","backgroundColor","address","lat","lon","air","current","temp","weather","humidity","icon","today","tomorrow","hourlyData","weeklyData","lifeStyle","scale","width","onLoad","wx","getSystemInfo","success","res","windowWidth","setData","paddingTop","getLocation","getAddress","name","showLoading","title","mask","fail","e","hideLoading","result","statusCode","formatted_addresses","address_component","recommend","rough","province","city","county","district","updateLocation","latitude","longitude","type","openLocation","showToast","duration","chooseLocation","getWeatherData","cb","then","render","catch","onPullDownRefresh","stopPullDownRefresh","onShareAppMessage","path","url","hourly","daily","oneWord","effect","_today","_tomorrow","minTemp","maxTemp","dayIcon","day","drawChart","height","ctx","createCanvasContext","Chart","pluginService","register","afterDatasetsDraw"],"mappings":"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","file":"index.js","sourcesContent":["import Chart from '../../lib/chartjs';\n/* <remove trigger='prod'> */\nimport {\n    geocoder\n} from \"../../lib/api\";\nimport {\n    getWeather,\n    getAir\n} from '../../lib/api-mock';\n/* </remove> */\n/*<jdists trigger=\"prod\">\nimport {getEmotionByOpenidAndDate, getMood, geocoder, getWeather, getAir} from '../../lib/api'\n</jdists>*/\nlet isUpdate = false\nconst EFFECT_CANVAS_HEIGHT = 768 / 2\nconst CHART_CANVAS_HEIGHT = 272 / 2\nPage({\n    data: {\n        statusBarHeight: 32,\n        backgroundImage: '../../images/cloud.jpg',\n        backgroundColor: '#62aadc',\n        address: '定位中',\n        lat: 40.056974,\n        lon: 116.307689,\n        air: {\n            \"status\": 0,\n            \"aqi\": \"77\",\n            \"color\": \"#00cf9a\",\n            \"name\": \"良\"\n        },\n        current: {\n            temp: '0',\n            weather: '数据获取中',\n            humidity: '1',\n            icon: 'xiaolian'\n        },\n        today: {\n            temp: 'N/A',\n            weather: '暂无'\n        },\n        tomorrow: {\n            temp: 'N/A',\n            weather: '暂无'\n        },\n        hourlyData: [],\n        // 一周天气数据\n        weeklyData: [],\n        // 生活指数\n        lifeStyle: [],\n        scale: 1,\n        width: 375\n    },\n    onLoad() {\n        wx.getSystemInfo({\n            success: res => {\n                let width = res.windowWidth;\n                let scale = width / 375;\n                this.setData({\n                    width,\n                    scale,\n                    paddingTop: res.statusBarHeight + 12\n                })\n            }\n        })\n        // const pages=getCurrentPages();\n        // const currentPage=pages[pages.length-1];\n        this.getLocation()\n    },\n    getAddress(lat, lon, name) {\n        wx.showLoading({\n            title: '定位中',\n            mask: true\n        })\n        let fail = (e) => {\n            this.setData({\n                address: name || '杭州市西湖区'\n            });\n            wx.hideLoading();\n            // this.getWeatherData()\n        }\n        geocoder(lat, lon, (res) => {\n            wx.hideLoading();\n            let result = (res.data || {}).result;\n            if (res.statusCode === 200 && result && result.address) {\n                let {\n                    address,\n                    formatted_addresses,\n                    address_component\n                } = result\n                if (formatted_addresses && (formatted_addresses.recommend || formatted_addresses.rough)) {\n                    address = formatted_addresses.recommend || formatted_addresses.rough\n                }\n                let {\n                    province,\n                    city,\n                    district: county\n                } = address_component;\n                this.setData({\n                    province,\n                    county,\n                    city,\n                    address: name || address\n                });\n                // this.getWeatherData()\n            } else {\n                fail()\n            }\n        }, fail)\n    },\n    updateLocation(res) {\n        let {\n            latitude: lat,\n            longitude: lon,\n            name\n        } = res;\n        let data = {\n            lat,\n            lon\n        }\n        if (name) {\n            data.address = name\n        }\n        this.setData(data);\n        this.getAddress(lat, lon, name)\n    },\n    getLocation() {\n        wx.getLocation({\n            type: 'gcj02',\n            success: this.updateLocation,\n            fail: (e) => {\n                this.openLocation()\n            }\n        })\n    },\n    openLocation() {\n        wx.showToast({\n            title: '检测到您未授权使用位置权限，请先开启哦',\n            icon: 'none',\n            duration: 3000\n        })\n    },\n    chooseLocation() {\n        wx.chooseLocation({\n            success: (res) => {\n                let {\n                    latitude,\n                    longitude\n                } = res;\n                let {\n                    lat,\n                    lon\n                } = this.data;\n                if (latitude == lat && lon == longitude) {\n                    // this.getWeatherData()\n                } else {\n                    this.updateLocation(res)\n                }\n            }\n        })\n    },\n    getWeatherData(cb) {\n        wx.showLoading({\n            title: '正在加载中',\n            mask: true\n        });\n        const fail = (e) => {\n            wx.hideLoading();\n            if (typeof cb === 'function') {\n                cb()\n            };\n            wx.showToast({\n                title: '加载失败，请稍后重试',\n                icon: 'none',\n                duration: 3000\n            });\n        }\n        const {\n            lat,\n            lon,\n            province,\n            city,\n            county\n        } = this.data;\n        getWeather(lat, lon).then((res) => {\n            wx.hideLoading();\n            if (typeof cb === 'function') {\n                cb()\n            }\n            if (res.result) {\n                this.render(res.result)\n            } else {\n                fail()\n            }\n        }).catch(fail)\n        getAir(city).then((res => {\n            if (res && res.result) {\n                this.setData({\n                    air: res.result\n                })\n            }\n        })).catch(e => {})\n    },\n    onPullDownRefresh() {\n        this.getWeatherData(() => {\n            wx.stopPullDownRefresh()\n        })\n    },\n    onShareAppMessage() {\n        if (!isUpdate) {\n            return {\n                title: '我发现一个好玩的小程序，分享给你看看！',\n                path: '/pages/weather/index'\n            }\n        } else {\n            const {\n                lat,\n                lon,\n                address,\n                province,\n                city,\n                county\n            } = this.data;\n            let url = `/pages/weather/index?lat=${lat}&lon=${lon}&address=${address}&province=${province}&city=${city}&county=${county}`;\n            return {\n                title: `${address}现在天气情况，快打开看看吧`,\n                path: url\n            }\n        }\n    },\n    render(data) {\n        isUpdate = true;\n        const {\n            width,\n            scale\n        } = this.data;\n        const {\n            hourly,\n            daily,\n            current,\n            lifeStyle,\n            oneWord = '',\n            effect\n        } = data;\n        const {\n            backgroundColor,\n            backgroundImage\n        } = current;\n        const _today = daily[0],\n            _tomorrow = daily[1];\n        const today = {\n            temp: `${_today.minTemp}/${_today.maxTemp}°`,\n            icon: _today.dayIcon,\n            weather: _today.day\n        };\n        const tomorrow = {\n            temp: `${_tomorrow.minTemp}/${_tomorrow.maxTemp}`,\n            icon: _tomorrow.dayIcon,\n            weather: _tomorrow.day\n        }\n        this.setData({\n            hourlyData: hourly,\n            weeklyData: daily,\n            current,\n            backgroundImage,\n            backgroundColor,\n            today,\n            tomorrow,\n            oneWord,\n            lifeStyle\n        })\n    },\n    drawChart(){\n        const {width,scale,weeklyData}=this.data;\n        let height=CHART_CANVAS_HEIGHT*scale;\n        let ctx=wx.createCanvasContext('chart');\n        Chart.pluginService.register({\n            afterDatasetsDraw\n        })\n    }\n})"]}