{"version":3,"sources":["lib/api-mock.js"],"names":["QQ_MAP_KEY","geocoder","lat","lon","success","fail","wx","request","url","data","location","key","get_poi","getWeather","Promise","resolve","reject","res","result","e","jscode2session","code","getAir","city"],"mappings":";;;;;;;AAAA;;;;;;AACA,IAAMA,aAAa,qCAAnB;AACA;AACA;AACA;AACA;;;;;AAKO,IAAMC,8BAAW,SAAXA,QAAW,CAACC,GAAD,EAAMC,GAAN,EAAmD;AAAA,MAAxCC,OAAwC,uEAA9B,YAAM,CAAE,CAAsB;AAAA,MAApBC,IAAoB,uEAAb,YAAM,CAAE,CAAK;;AACzE,SAAOC,GAAGC,OAAH,CAAW;AAChBC,SAAK,yCADW;AAEhBC,UAAM;AACJC,gBAAaR,GAAb,SAAoBC,GADhB;AAEJQ,WAAKX,UAFD;AAGJY,eAAS;AAHL,KAFU;AAOhBR,aAASA,OAPO;AAQhBC,UAAMA;AARU,GAAX,CAAP;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD,CAzBM;AA0BA,IAAMQ,kCAAa,SAAbA,UAAa,CAACX,GAAD,EAAMC,GAAN,EAAc;AACtC,SAAO,IAAIW,kBAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtCV,OAAGC,OAAH,CAAW;AACTC,WAAK,sCADI;AAETC,YAAM;AACJP,gBADI;AAEJC;AAFI,OAFG;AAMTC,eAAS,iBAACa,GAAD,EAAS;AAChBF,gBAAQ,EAACG,QAAQD,IAAIR,IAAb,EAAR;AACD,OARQ;AASTJ,YAAM,cAACc,CAAD,EAAO;AACXH,eAAOG,CAAP;AACD;AAXQ,KAAX;AAaD,GAdM,CAAP;AAeD,CAhBM;AAiBA,IAAMC,0CAAiB,SAAjBA,cAAiB,CAACC,IAAD,EAAU;AACtC,SAAO,IAAIP,kBAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtCV,OAAGC,OAAH,CAAW;AACTC,WAAK,0CADI;AAETC,YAAM;AACJY;AADI,OAFG;AAKTjB,eAAS,iBAACa,GAAD,EAAS;AAChBF,gBAAQ,EAACG,QAAQD,IAAIR,IAAb,EAAR;AACD,OAPQ;AAQTJ,YAAMW;AARG,KAAX;AAUD,GAXM,CAAP;AAYD,CAbM;AAcA,IAAMM,0BAAS,SAATA,MAAS,CAACC,IAAD,EAAU;AAC9B,SAAO,IAAIT,kBAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtCV,OAAGC,OAAH,CAAW;AACTC,WAAK,kCADI;AAETC,YAAM;AACJc;AADI,OAFG;AAKTnB,eAAS,iBAACa,GAAD,EAAS;AAChBF,gBAAQ,EAACG,QAAQD,IAAIR,IAAb,EAAR;AACD,OAPQ;AAQTJ,YAAM,cAACc,CAAD,EAAO;AACXH,eAAOG,CAAP;AACD;AAVQ,KAAX;AAYD,GAbM,CAAP;AAcD,CAfM","file":"api-mock.js","sourcesContent":["import Promise from './bluebird'\nconst QQ_MAP_KEY = 'X4UBZ-4CI66-AGBSA-MAYY3-GEOF6-LXBNX'\n// wx.cloud.init({\n//   env: 'hao-weather-2752f1'\n// })\n/**\n *  逆经纬度查询\n * @param {*} lat\n * @param {*} lon\n */\nexport const geocoder = (lat, lon, success = () => {}, fail = () => {}) => {\n  return wx.request({\n    url: 'https://apis.map.qq.com/ws/geocoder/v1/',\n    data: {\n      location: `${lat},${lon}`,\n      key: QQ_MAP_KEY,\n      get_poi: 0\n    },\n    success: success,\n    fail: fail\n  })\n  // return wx.cloud.callFunction({\n  //   name: 'geocoder',\n  //   data: {\n  //     lat,\n  //     lon\n  //   }\n  // })\n  //\n  // return $.request({\n  //   url: SERVER_URL + '/api/geocoder',\n  //   data: {\n  //     location: `${lat},${lon}`\n  //   }\n  // })\n}\nexport const getWeather = (lat, lon) => {\n  return new Promise((resolve, reject) => {\n    wx.request({\n      url: 'http://127.0.0.1:5030/api/he-weather',\n      data: {\n        lat,\n        lon\n      },\n      success: (res) => {\n        resolve({result: res.data})\n      },\n      fail: (e) => {\n        reject(e)\n      }\n    })\n  })\n}\nexport const jscode2session = (code) => {\n  return new Promise((resolve, reject) => {\n    wx.request({\n      url: 'http://127.0.0.1:5030/api/jscode2session',\n      data: {\n        code\n      },\n      success: (res) => {\n        resolve({result: res.data})\n      },\n      fail: reject\n    })\n  })\n}\nexport const getAir = (city) => {\n  return new Promise((resolve, reject) => {\n    wx.request({\n      url: 'http://127.0.0.1:5030/api/he-air',\n      data: {\n        city\n      },\n      success: (res) => {\n        resolve({result: res.data})\n      },\n      fail: (e) => {\n        reject(e)\n      }\n    })\n  })\n}\n"]}